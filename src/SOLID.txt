Принципы SOLID

S: Single  Responsibility (единственной ответственности)
    Каждый объект должен иметь отдну ответственность и эта ответственность должна быть
    полность инкапсулирована в класс
O: Open-Closed (открытости - закрытости)
    Программные сущности должны быть:
        - открыты для расширения (поведение сущности может быть расширено
        путем создания новых типо сущностей)
        - закрыты для изменения (в результате расширения поведения сущности
        не должны вноситься изменения в код, который эту сущность использует)
L: Liskov Substitution (подстановки Барбары Лисков)
    Функции, которые используют базовый тип, должны иметь возможность использовать
    подтипы базового типа, не зная об этом
I: Interface Segregation (разделения интерфейса)
    Много интерфейсов, специально предназначенных для клиентов лучше
    чем один интерфейс общего назначения
D: Dependency Inversion (инверсии зависимостей)
    Классы должны зависеть от абстракций, а не от конкретных деталей