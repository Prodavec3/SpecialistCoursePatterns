Порождающие паттерны - создать набор обьектов

Порождающие паттерны проектирования абстрагируют процесс инстанцирования.
Делегируем создание объекта сторонней сущности.
Главная задача этих паттернов - скрпыть информацию о том как создавать и инициализировать объект.


            Фабричный метод (Factory Method)
        (CodeExamples.Creational.FactoryMethod)

Смысл: мы не пишем new, а вызываем метод, который возвращает новый объект.
Сначала расписываем интерфейс с фабричными методами.
Далее можем сделать несколько реализаций этого интерфейса.

FabricFactory -> фабричный метод = createWindow, код делегирует создание окна
конкретному поставщику Supplier
Supplier s = new GenericSupplier(WoodFrameWindow.class)
Window wnd = s.createWindow();

С помощью hook'ов мы можем выполнять что-то до или после создания объекта
- onInstall(Window window)

Если фабрика помнит про те объекты что она сделала - она называется Container.


            Абстрактная фабрика (Abstract Factory, Kit)
             (CodeExamples.Creational.AbstractFactory)

Позволяет создавать семейства связанных объектов, не привязываясь к конкретным классам
создаваемых объектов.

Плюсы: изолирует конкретные классы, кпрощает замену семейств продуктов.
гарантирует сочетаемость продуктов.
Минусы: поддержать новый вид продуктов трудно.


            Строитель (Builder)
     (CodeExamples.Creational.Builder)

Отдаляет конструирование сложного объекта от его представления, так что в результате
одного и того же процесса конструирования могут получаться разные представления.
Конструирование объекта осуществиляется по отношению к нему сущностями,
называемыми строителями.
Позволяет избавиться от конструктора сомножеством опциональных параметров.


            Прототип (Prototype)
      (CodeExamples.Creational.Prototype)

Идея: Создание путем копирования ранее созданного объекта
Используется в ситуации когда нужно создавать объекты чтобы каждый вновь
созданный объект имел набор свойств исходного (прототипа).

Можно создать несколько прототипов и использовать их.

Внешне выглядит похож на паттерн фабрики и билдер
(скрывает от клиентского кода конкретные классы продуктов).

В Java данный паттерн (прототип) реализован интерфейсом Cloneable


            Синглтон (Singleton), антипаттерн
                (CodeExamples.Creational)

Класс, спроектированный таким образом, чтобы можно было впрограмме создать не более
одного объекта этого класса.

Нарушает принцип SOLID: Single responsibility (реализует + является фабрикой сам для себя).

Сохраняем где-то ссылку на этот единственный объект и делаем фабричный метод,
который возвращает ссылку на этот объект один и тот же, т.е разные части программы
работают с одним и тем же объектом.

* Джава машина гарантирует создание статических полей в потокобезопасном режиме
* lazy init - ленивая инициализация (создание при обращении, без - не создает)
* emun в джаве ссылочный тип данных (практически класс с приватным конструктором)
-> потоколезопасно (S7 редко используется)